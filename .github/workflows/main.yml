name: CI
on: [push, pull_request]

jobs:

  linux-ndll:
    runs-on: ubuntu-20.04
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev g++-multilib gcc-multilib libasound2-dev libx11-dev libxext-dev libxi-dev libxrandr-dev libxinerama-dev libmbedtls-dev libpng-dev libturbojpeg-dev libuv1-dev libvorbis-dev

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=~/.hxcpp" >> $GITHUB_ENV

      - name: Rebuild Lime tools
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime rebuild tools -nocolor -verbose -nocffi
          haxelib run lime setup -alias -y -nocffi

      - name: Rebuild Lime (Linux)
        run: |
          lime rebuild linux -32 -release -nocolor -verbose -nocffi
          lime rebuild linux -64 -release -nocolor -verbose -nocffi
          lime rebuild hl -clean -release -nocolor -verbose -nocffi

      - uses: actions/upload-artifact@v3
        with:
          name: Linux-NDLL
          path: |
            ndll/Linux/
            !**/.gitignore
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: Linux64-NDLL
          path: |
            ndll/Linux64/
            !**/.gitignore
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: Linux64-Hashlink
          path: |
            templates/bin/hl/Linux64
          if-no-files-found: error

  macos-ndll:
    runs-on: macos-11
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install HashLink dependencies
        run: |
          pushd project/lib/hashlink
          brew update
          rm /usr/local/bin/2to3*
          rm /usr/local/bin/idle3*
          rm /usr/local/bin/pydoc3*
          rm /usr/local/bin/python3*
          brew bundle
          popd

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=~/.hxcpp" >> $GITHUB_ENV

      - name: Rebuild Lime tools
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime rebuild tools -nocolor -verbose -nocffi
          haxelib run lime setup -alias -y -nocffi

      - name: Rebuild Lime (macOS)
        run: |
          lime rebuild macos -clean -release -64 -nocolor -verbose -nocffi
          lime rebuild hl -clean -release -nocolor -verbose -nocffi

      - uses: actions/upload-artifact@v3
        with:
          name: Mac64-NDLL
          path: |
            ndll/Mac64/
            !**/.gitignore
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: Mac64-Hashlink
          path: |
            templates/bin/hl/Mac64
          if-no-files-found: error

  windows-ndll:
    runs-on: windows-latest
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$Env:HAXE_STD_PATH\.." >> $Env:GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=C:\.hxcpp" >> $Env:GITHUB_ENV

      - name: Rebuild Lime tools
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime rebuild tools -nocolor -verbose -nocffi
          haxelib run lime setup -alias -y -nocffi

      - name: Rebuild Lime (Windows)
        run: |
          lime rebuild windows -32 -release -nocolor -verbose -nocffi
          lime rebuild windows -64 -release -nocolor -verbose -nocffi
          lime rebuild hl -clean -release -nocolor -verbose -nocffi

      - uses: actions/upload-artifact@v3
        with:
          name: Windows-NDLL
          path: |
            ndll/Windows/
            !**/.gitignore
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: Windows64-NDLL
          path: |
            ndll/Windows64/
            !**/.gitignore
          if-no-files-found: error

      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: Windows-Hashlink
      #     path: |
      #       templates/bin/hl/Windows
      #     if-no-files-found: error
      - uses: actions/upload-artifact@v3
        with:
          name: Windows64-Hashlink
          path: |
            templates/bin/hl/Windows64
          if-no-files-found: error

  android-ndll:
    runs-on: ubuntu-20.04
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r15c

      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 11

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=~/.hxcpp" >> $GITHUB_ENV

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi -eval

      - name: Configure Android support
        run: |
          lime config ANDROID_SDK $ANDROID_HOME -eval
          lime config ANDROID_NDK_ROOT ${{ steps.setup-ndk.outputs.ndk-path }} -eval
          lime config JAVA_HOME $JAVA_HOME -eval
          lime config ANDROID_SETUP true -eval
          lime config -eval

      - name: Rebuild Lime (Android)
        run: |
          lime rebuild android -release -nocolor -verbose -nocffi -eval

      - uses: actions/upload-artifact@v3
        with:
          name: Android-NDLL
          path: |
            ndll/Android/
            !**/.gitignore
          if-no-files-found: error

  ios-ndll:
    runs-on: macos-11
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=~/.hxcpp" >> $GITHUB_ENV

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi -eval

      - name: Rebuild Lime (iOS)
        run: |
          lime rebuild ios -clean -release -verbose -nocolor -eval

      - uses: actions/upload-artifact@v3
        with:
          name: iPhone-NDLL
          path: |
            ndll/iPhone/
            !**/.gitignore
          if-no-files-found: error

  package-haxelib:
    needs: [linux-ndll, macos-ndll, windows-ndll, android-ndll, ios-ndll]
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet
          haxelib install svg --quiet
          haxelib install openfl --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=~/.hxcpp" >> $GITHUB_ENV

      - name: Rebuild Lime tools
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime rebuild tools -nocolor -verbose -nocffi
          haxelib run lime setup -alias -y -nocffi
          cp project/lib/hashlink/other/osx/entitlements.xml templates/bin/hl/entitlements.xml

      - uses: actions/download-artifact@v3
        with:
          name: Android-NDLL
          path: ndll/Android/

      - uses: actions/download-artifact@v3
        with:
          name: iPhone-NDLL
          path: ndll/iPhone/

      - uses: actions/download-artifact@v3
        with:
          name: Linux-NDLL
          path: ndll/Linux/

      - uses: actions/download-artifact@v3
        with:
          name: Linux64-NDLL
          path: ndll/Linux64/

      - uses: actions/download-artifact@v3
        with:
          name: Mac64-NDLL
          path: ndll/Mac64/

      - uses: actions/download-artifact@v3
        with:
          name: Windows-NDLL
          path: ndll/Windows/

      - uses: actions/download-artifact@v3
        with:
          name: Windows64-NDLL
          path: ndll/Windows64/

      # - uses: actions/download-artifact@v3
      #   with:
      #     name: Windows-Hashlink
      #     path: templates/bin/hl/Windows

      - uses: actions/download-artifact@v3
        with:
          name: Windows64-Hashlink
          path: templates/bin/hl/Windows64

      - uses: actions/download-artifact@v3
        with:
          name: Mac64-Hashlink
          path: templates/bin/hl/Mac64

      - uses: actions/download-artifact@v3
        with:
          name: Linux64-Hashlink
          path: templates/bin/hl/Linux64

      - name: Rebuild Lime svg.n
        working-directory: tools
        run: |
          haxe svg.hxml

      - uses: actions/upload-artifact@v3
        with:
          name: lime-haxelib
          path: |
            ./
            !project/
            !haxe-*-*/
            !neko-*-*/
            !.git/
          if-no-files-found: error

  docs:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install dox --quiet
          haxelib dev lime ${{ github.workspace }}

      - name: Build docs
        working-directory: docs
        run: |
          haxe build.hxml

      - uses: actions/upload-artifact@v3
        with:
          name: lime-docs
          path: docs/pages
          if-no-files-found: error

  android-samples:
    needs: android-ndll
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3

      - name: Install Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r15c

      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 11

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet
          haxelib git lime-samples https://github.com/openfl/lime-samples --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=~/.hxcpp" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: Android-NDLL
          path: ndll/Android/

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi -eval

      - name: Configure Android support
        run: |
          lime config ANDROID_SDK $ANDROID_HOME -eval
          lime config ANDROID_NDK_ROOT ${{ steps.setup-ndk.outputs.ndk-path }} -eval
          lime config JAVA_HOME $JAVA_HOME -eval
          lime config ANDROID_SETUP true -eval
          lime config -eval

      - name: Build HelloWorld sample
        run: |
          lime create HelloWorld -verbose -nocolor -eval
          lime build HelloWorld android -release -verbose -nocolor -eval

      - name: Build SimpleImage sample
        run: |
          lime create SimpleImage -verbose -nocolor -eval
          lime build SimpleImage android -release -verbose -nocolor -eval

      - name: Build SimpleAudio sample
        run: |
          lime create SimpleAudio -verbose -nocolor -eval
          lime build SimpleAudio android -release -verbose -nocolor -eval

  flash-samples:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install format --quiet
          haxelib git lime-samples https://github.com/openfl/lime-samples --quiet

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi -eval

      - name: Build HelloWorld sample
        run: |
          lime create HelloWorld -verbose -nocolor -eval
          lime build HelloWorld flash -release -verbose -nocolor -eval

      - name: Build SimpleImage sample
        run: |
          lime create SimpleImage -verbose -nocolor -eval
          lime build SimpleImage flash -release -verbose -nocolor -eval

      - name: Build SimpleAudio sample
        run: |
          lime create SimpleAudio -verbose -nocolor -eval
          lime build SimpleAudio flash -release -verbose -nocolor -eval

  air-samples:
    needs: windows-ndll
    runs-on: windows-latest
    strategy:
      matrix:
        haxe-version: [3.4.7, 4.0.5, 4.1.5, 4.2.5, 4.3.1]
    steps:

      - uses: actions/checkout@v3

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - uses: joshtynjala/setup-adobe-air-action@v2
        with:
          air-version: "33.1"
          accept-license: true

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$Env:HAXE_STD_PATH\.." >> $Env:GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install format --quiet
          haxelib git lime-samples https://github.com/openfl/lime-samples --quiet

      - uses: actions/download-artifact@v3
        with:
          name: Windows64-NDLL
          path: ndll/Windows64

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi
          haxelib run lime config AIR_SDK ${{ env.AIR_HOME }}

      - name: Build HelloWorld sample
        run: |
          lime create HelloWorld -verbose -nocolor
          lime build HelloWorld air -release -verbose -nocolor

      - name: Build SimpleImage sample
        run: |
          lime create SimpleImage -verbose -nocolor
          lime build SimpleImage air -release -verbose -nocolor

      - name: Build SimpleAudio sample
        run: |
          lime create SimpleAudio -verbose -nocolor
          lime build SimpleAudio air -release -verbose -nocolor

  hashlink-samples:
    needs: linux-ndll
    runs-on: ubuntu-20.04
    steps:

      - uses: actions/checkout@v3

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib git lime-samples https://github.com/openfl/lime-samples --quiet

      - uses: actions/download-artifact@v3
        with:
          name: Linux64-NDLL
          path: ndll/Linux64

      - uses: actions/download-artifact@v3
        with:
          name: Linux64-Hashlink
          path: templates/bin/hl/Linux64

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi

      - name: Build HelloWorld sample
        run: |
          lime create HelloWorld -verbose -nocolor
          lime build HelloWorld hl -release -verbose -nocolor

      - name: Build SimpleImage sample
        run: |
          lime create SimpleImage -verbose -nocolor
          lime build SimpleImage hl -release -verbose -nocolor

      - name: Build SimpleAudio sample
        run: |
          lime create SimpleAudio -verbose -nocolor
          lime build SimpleAudio hl -release -verbose -nocolor

  html5-samples:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install format --quiet
          haxelib install genes --quiet
          haxelib git lime-samples https://github.com/openfl/lime-samples --quiet

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi -eval

      - name: Build HelloWorld sample
        run: |
          lime create HelloWorld -verbose -nocolor -eval
          lime build HelloWorld html5 -release -verbose -nocolor -eval

      - name: Build HelloWorld variants
        run: |
          lime build HelloWorld html5 -clean -release -verbose -nocolor --haxelib=genes -eval
          lime build HelloWorld html5 -clean -release -verbose -nocolor -minify -terser -eval

      - name: Build SimpleImage sample
        run: |
          lime create SimpleImage -verbose -nocolor -eval
          lime build SimpleImage html5 -release -verbose -nocolor -eval

      - name: Build SimpleImage variants
        run: |
          lime build SimpleImage html5 -clean -release -verbose -nocolor --haxelib=genes -eval
          lime build SimpleImage html5 -clean -release -verbose -nocolor -minify -terser -eval

      - name: Build SimpleAudio sample
        run: |
          lime create SimpleAudio -verbose -nocolor -eval
          lime build SimpleAudio html5 -release -verbose -nocolor -eval

      - name: Build SimpleAudio variants
        run: |
          lime build SimpleAudio html5 -clean -release -verbose -nocolor --haxelib=genes -eval
          lime build SimpleAudio html5 -clean -release -verbose -nocolor -minify -terser -eval

  ios-samples:
    needs: ios-ndll
    runs-on: macos-11
    steps:

      - uses: actions/checkout@v3

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet
          haxelib git lime-samples https://github.com/openfl/lime-samples --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=~/.hxcpp" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: iPhone-NDLL
          path: ndll/iPhone

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi -eval

      - name: Build HelloWorld sample
        run: |
          lime create HelloWorld -verbose -nocolor -eval
          lime build HelloWorld ios -simulator -release -verbose -nocolor -eval

      - name: Build SimpleImage sample
        run: |
          lime create SimpleImage -verbose -nocolor -eval
          lime build SimpleImage ios -simulator -release -verbose -nocolor -eval

      - name: Build SimpleAudio sample
        run: |
          lime create SimpleAudio -verbose -nocolor -eval
          lime build SimpleAudio ios -simulator -release -verbose -nocolor -eval

  linux-samples:
    needs: linux-ndll
    runs-on: ubuntu-20.04
    steps:

      - uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev g++-multilib gcc-multilib libasound2-dev libx11-dev libxext-dev libxi-dev libxrandr-dev libxinerama-dev

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet
          haxelib git lime-samples https://github.com/openfl/lime-samples --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=~/.hxcpp" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: Linux64-NDLL
          path: ndll/Linux64

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi

      - name: Build HelloWorld sample
        run: |
          lime create HelloWorld -verbose -nocolor
          lime build HelloWorld linux -release -verbose -nocolor

      - name: Build SimpleImage sample
        run: |
          lime create SimpleImage -verbose -nocolor
          lime build SimpleImage linux -release -verbose -nocolor

      - name: Build SimpleAudio sample
        run: |
          lime create SimpleAudio -verbose -nocolor
          lime build SimpleAudio linux -release -verbose -nocolor

  macos-samples:
    needs: macos-ndll
    runs-on: macos-11
    steps:

      - uses: actions/checkout@v3

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet
          haxelib git lime-samples https://github.com/openfl/lime-samples --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=~/.hxcpp" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: Mac64-NDLL
          path: ndll/Mac64

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi

      - name: Build HelloWorld sample
        run: |
          lime create HelloWorld -verbose -nocolor
          lime build HelloWorld macos -release -verbose -nocolor

      - name: Build SimpleImage sample
        run: |
          lime create SimpleImage -verbose -nocolor
          lime build SimpleImage macos -release -verbose -nocolor

      - name: Build SimpleAudio sample
        run: |
          lime create SimpleAudio -verbose -nocolor
          lime build SimpleAudio macos -release -verbose -nocolor

  neko-samples:
    needs: linux-ndll
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        haxe-version: [3.4.7, 4.0.5, 4.1.5, 4.2.5, 4.3.1]
    steps:

      - uses: actions/checkout@v3

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: ${{ matrix.haxe-version }}

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$HAXE_STD_PATH/.." >> $GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib git lime-samples https://github.com/openfl/lime-samples --quiet

      - uses: actions/download-artifact@v3
        with:
          name: Linux64-NDLL
          path: ndll/Linux64

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi

      - name: Build HelloWorld sample
        run: |
          lime create HelloWorld -verbose -nocolor
          lime build HelloWorld neko -release -verbose -nocolor

      - name: Build SimpleImage sample
        run: |
          lime create SimpleImage -verbose -nocolor
          lime build SimpleImage neko -release -verbose -nocolor

      - name: Build SimpleAudio sample
        run: |
          lime create SimpleAudio -verbose -nocolor
          lime build SimpleAudio neko -release -verbose -nocolor

  windows-samples:
    needs: windows-ndll
    runs-on: windows-latest
    steps:

      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Set HAXEPATH
        run: |
          echo "HAXEPATH=$Env:HAXE_STD_PATH\.." >> $Env:GITHUB_ENV

      - name: Install Haxe dependencies
        run: |
          haxelib install hxcpp 4.2.1 --quiet
          haxelib install format --quiet
          haxelib install hxp --quiet
          haxelib git lime-samples https://github.com/openfl/lime-samples --quiet

      - name: Enable HXCPP compile cache
        run: |
          echo "HXCPP_COMPILE_CACHE=C:\.hxcpp" >> $Env:GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: Windows64-NDLL
          path: ndll/Windows64

      - name: Prepare Lime
        run: |
          haxelib dev lime ${{ github.workspace }}
          haxelib run lime setup -alias -y -nocffi

      - name: Build HelloWorld sample
        run: |
          lime create HelloWorld -verbose -nocolor
          lime build HelloWorld windows -release -verbose -nocolor

      - name: Build SimpleImage sample
        run: |
          lime create SimpleImage -verbose -nocolor
          lime build SimpleImage windows -release -verbose -nocolor

      - name: Build SimpleAudio sample
        run: |
          lime create SimpleAudio -verbose -nocolor
          lime build SimpleAudio windows -release -verbose -nocolor

  notify:
    runs-on: ubuntu-20.04
    needs: [package-haxelib, docs, android-samples, flash-samples, air-samples, hashlink-samples, html5-samples, ios-samples, linux-samples, macos-samples, neko-samples, windows-samples]
    if: ${{ github.repository == 'openfl/lime' && github.event_name != 'pull_request' }}
    steps:
      - name: Notify Discord
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.github_token }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}
